"use client"

import { useState, useEffect } from "react"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { Badge } from "@/components/ui/badge"
import { useAuth } from "@/lib/auth-context"
import { getUserRole, isUserAdmin, getAllUserRoles } from "@/lib/firestore-auth"
import { Loader2, RefreshCw, CheckCircle, XCircle, AlertCircle } from "lucide-react"

export default function AdminCheckDebugPage() {
  const { user, isAdmin, adminLoading, adminCheckCompleted, checkAdminStatus } = useAuth()
  const [loading, setLoading] = useState(false)
  const [userRole, setUserRole] = useState<any>(null)
  const [adminCheck, setAdminCheck] = useState<boolean | null>(null)
  const [allUserRoles, setAllUserRoles] = useState<any[]>([])
  const [error, setError] = useState<string | null>(null)

  const checkUserRole = async () => {
    if (!user) return

    setLoading(true)
    setError(null)

    try {
      console.log("üîç B·∫Øt ƒë·∫ßu ki·ªÉm tra vai tr√≤ cho user:", user.uid)

      // L·∫•y vai tr√≤ ng∆∞·ªùi d√πng t·ª´ Firestore
      const role = await getUserRole(user.uid)
      console.log("üìã Vai tr√≤ t·ª´ Firestore:", role)
      setUserRole(role)

      // Ki·ªÉm tra quy·ªÅn admin
      const isAdminResult = await isUserAdmin(user.uid)
      console.log("‚úÖ K·∫øt qu·∫£ isUserAdmin:", isAdminResult)
      setAdminCheck(isAdminResult)

      // L·∫•y t·∫•t c·∫£ vai tr√≤ ƒë·ªÉ debug
      const allRoles = await getAllUserRoles()
      console.log("üìä T·∫•t c·∫£ vai tr√≤ trong h·ªá th·ªëng:", allRoles)
      setAllUserRoles(allRoles)
    } catch (error: any) {
      console.error("‚ùå L·ªói khi ki·ªÉm tra vai tr√≤:", error)
      setError(error.message)
    } finally {
      setLoading(false)
    }
  }

  const refreshAdminStatus = async () => {
    setLoading(true)
    try {
      console.log("üîÑ L√†m m·ªõi tr·∫°ng th√°i admin...")
      await checkAdminStatus()
      await checkUserRole() // C·∫≠p nh·∫≠t l·∫°i th√¥ng tin debug
    } catch (error: any) {
      console.error("‚ùå L·ªói khi l√†m m·ªõi tr·∫°ng th√°i admin:", error)
      setError(error.message)
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    if (user) {
      checkUserRole()
    }
  }, [user])

  const getStatusIcon = (status: boolean | null) => {
    if (status === true) return <CheckCircle className="h-4 w-4 text-green-500" />
    if (status === false) return <XCircle className="h-4 w-4 text-red-500" />
    return <AlertCircle className="h-4 w-4 text-yellow-500" />
  }

  const getStatusBadge = (status: boolean | null) => {
    if (status === true)
      return (
        <Badge variant="default" className="bg-green-500">
          Admin
        </Badge>
      )
    if (status === false) return <Badge variant="destructive">User</Badge>
    return <Badge variant="secondary">Ch∆∞a x√°c ƒë·ªãnh</Badge>
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-3xl font-bold">Ki·ªÉm tra tr·∫°ng th√°i Admin</h1>
        <div className="flex gap-2">
          <Button onClick={checkUserRole} disabled={loading} variant="outline">
            {loading ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                ƒêang ki·ªÉm tra...
              </>
            ) : (
              <>
                <RefreshCw className="mr-2 h-4 w-4" />
                Ki·ªÉm tra l·∫°i
              </>
            )}
          </Button>
          <Button onClick={refreshAdminStatus} disabled={loading}>
            {loading ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                ƒêang l√†m m·ªõi...
              </>
            ) : (
              <>
                <RefreshCw className="mr-2 h-4 w-4" />
                L√†m m·ªõi tr·∫°ng th√°i
              </>
            )}
          </Button>
        </div>
      </div>

      <div className="grid gap-6">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              Th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
              {getStatusIcon(isAdmin)}
            </CardTitle>
            <CardDescription>Th√¥ng tin v√† tr·∫°ng th√°i c·ªßa ng∆∞·ªùi d√πng ƒëang ƒëƒÉng nh·∫≠p</CardDescription>
          </CardHeader>
          <CardContent>
            {user ? (
              <div className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <p className="text-sm font-medium text-muted-foreground">UID</p>
                    <p className="font-mono text-sm">{user.uid}</p>
                  </div>
                  <div>
                    <p className="text-sm font-medium text-muted-foreground">Email</p>
                    <p>{user.email}</p>
                  </div>
                  <div>
                    <p className="text-sm font-medium text-muted-foreground">T√™n hi·ªÉn th·ªã</p>
                    <p>{user.displayName || "Kh√¥ng c√≥"}</p>
                  </div>
                  <div>
                    <p className="text-sm font-medium text-muted-foreground">Tr·∫°ng th√°i Admin</p>
                    <div className="flex items-center gap-2">
                      {getStatusBadge(isAdmin)}
                      {adminLoading && <Loader2 className="h-4 w-4 animate-spin" />}
                    </div>
                  </div>
                </div>
              </div>
            ) : (
              <Alert>
                <AlertCircle className="h-4 w-4" />
                <AlertTitle>Ch∆∞a ƒëƒÉng nh·∫≠p</AlertTitle>
                <AlertDescription>B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i admin.</AlertDescription>
              </Alert>
            )}
          </CardContent>
        </Card>

        {error && (
          <Alert variant="destructive">
            <XCircle className="h-4 w-4" />
            <AlertTitle>L·ªói</AlertTitle>
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        <Card>
          <CardHeader>
            <CardTitle>Tr·∫°ng th√°i ki·ªÉm tra Admin</CardTitle>
            <CardDescription>Chi ti·∫øt v·ªÅ qu√° tr√¨nh ki·ªÉm tra quy·ªÅn admin</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="flex items-center gap-2">
                  <span className="text-sm font-medium">useAuth isAdmin:</span>
                  {getStatusBadge(isAdmin)}
                </div>
                <div className="flex items-center gap-2">
                  <span className="text-sm font-medium">Admin Loading:</span>
                  <Badge variant={adminLoading ? "secondary" : "outline"}>
                    {adminLoading ? "ƒêang t·∫£i" : "Ho√†n th√†nh"}
                  </Badge>
                </div>
                <div className="flex items-center gap-2">
                  <span className="text-sm font-medium">Ki·ªÉm tra ho√†n t·∫•t:</span>
                  <Badge variant={adminCheckCompleted ? "default" : "secondary"}>
                    {adminCheckCompleted ? "C√≥" : "Ch∆∞a"}
                  </Badge>
                </div>
              </div>

              {userRole && (
                <div>
                  <h3 className="font-medium mb-2">Vai tr√≤ t·ª´ Firestore:</h3>
                  <div className="p-4 bg-muted rounded-md">
                    <pre className="text-sm whitespace-pre-wrap">{JSON.stringify(userRole, null, 2)}</pre>
                  </div>
                </div>
              )}

              {adminCheck !== null && (
                <div>
                  <h3 className="font-medium mb-2">K·∫øt qu·∫£ isUserAdmin():</h3>
                  <div className="flex items-center gap-2">
                    {getStatusIcon(adminCheck)}
                    <span>{adminCheck ? "C√≥ quy·ªÅn admin" : "Kh√¥ng c√≥ quy·ªÅn admin"}</span>
                  </div>
                </div>
              )}
            </div>
          </CardContent>
        </Card>

        {allUserRoles.length > 0 && (
          <Card>
            <CardHeader>
              <CardTitle>T·∫•t c·∫£ vai tr√≤ trong h·ªá th·ªëng</CardTitle>
              <CardDescription>Danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng v√† vai tr√≤ c·ªßa h·ªç</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                {allUserRoles.map((role, index) => (
                  <div key={index} className="flex items-center justify-between p-2 border rounded">
                    <div>
                      <p className="font-medium">{role.email}</p>
                      <p className="text-sm text-muted-foreground">{role.displayName || "Kh√¥ng c√≥ t√™n"}</p>
                    </div>
                    <div className="flex items-center gap-2">
                      {getStatusBadge(role.role === "admin")}
                      {role.uid === user?.uid && <Badge variant="outline">B·∫°n</Badge>}
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        )}

        <Card>
          <CardHeader>
            <CardTitle>H∆∞·ªõng d·∫´n kh·∫Øc ph·ª•c</CardTitle>
            <CardDescription>C√°c b∆∞·ªõc ƒë·ªÉ kh·∫Øc ph·ª•c v·∫•n ƒë·ªÅ v·ªõi quy·ªÅn admin</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div>
                <h3 className="font-medium mb-2">1. Ki·ªÉm tra vai tr√≤ trong Firestore</h3>
                <p className="text-sm text-muted-foreground">
                  ƒê·∫£m b·∫£o ng∆∞·ªùi d√πng c√≥ b·∫£n ghi trong collection "userRoles" v·ªõi role="admin".
                </p>
              </div>

              <div>
                <h3 className="font-medium mb-2">2. L√†m m·ªõi tr·∫°ng th√°i admin</h3>
                <p className="text-sm text-muted-foreground">
                  S·ª≠ d·ª•ng n√∫t "L√†m m·ªõi tr·∫°ng th√°i" ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i admin trong ·ª©ng d·ª•ng.
                </p>
              </div>

              <div>
                <h3 className="font-medium mb-2">3. Thi·∫øt l·∫≠p l·∫°i admin</h3>
                <p className="text-sm text-muted-foreground">
                  N·∫øu c√°c b∆∞·ªõc tr√™n kh√¥ng hi·ªáu qu·∫£, b·∫°n c√≥ th·ªÉ th·ª≠ thi·∫øt l·∫≠p l·∫°i admin.
                </p>
                <Button variant="outline" className="mt-2" asChild>
                  <Link href="/admin/setup">ƒêi ƒë·∫øn trang thi·∫øt l·∫≠p admin</Link>
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
