"use client"

import { createContext, useContext, useState, useEffect, type ReactNode } from "react"
import {
  type User,
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  signOut,
  onAuthStateChanged,
  updateProfile,
  GoogleAuthProvider,
  signInWithPopup,
} from "firebase/auth"
import { auth } from "./firebase"
import { getUserRole, isUserAdmin, checkAndSetupFirstAdmin, setUserRole } from "./firestore-auth"

// Ki·ªÉm tra xem ch√∫ng ta ƒëang ·ªü m√¥i tr∆∞·ªùng browser hay kh√¥ng
const isBrowser = typeof window !== "undefined"

interface AuthContextType {
  user: User | null
  loading: boolean
  isAdmin: boolean
  adminLoading: boolean
  adminCheckCompleted: boolean
  adminDebugInfo: any
  signUp: (email: string, password: string, displayName: string) => Promise<void>
  signIn: (email: string, password: string) => Promise<void>
  signInWithGoogle: () => Promise<void>
  logout: () => Promise<void>
  checkAdminStatus: () => Promise<boolean>
}

const AuthContext = createContext<AuthContextType>({
  user: null,
  loading: true,
  isAdmin: false,
  adminLoading: true,
  adminCheckCompleted: false,
  adminDebugInfo: null,
  signUp: async () => {},
  signIn: async () => {},
  signInWithGoogle: async () => {},
  logout: async () => {},
  checkAdminStatus: async () => false,
})

export const useAuth = () => useContext(AuthContext)

export const AuthProvider = ({ children }: { children: ReactNode }) => {
  const [user, setUser] = useState<User | null>(null)
  const [loading, setLoading] = useState(true)
  const [isAdmin, setIsAdmin] = useState(false)
  const [adminLoading, setAdminLoading] = useState(true)
  const [adminCheckCompleted, setAdminCheckCompleted] = useState(false)
  const [adminDebugInfo, setAdminDebugInfo] = useState<any>(null)

  // Ki·ªÉm tra quy·ªÅn admin
  const checkAdminStatus = async (): Promise<boolean> => {
    if (!user) {
      console.log("‚ùå Kh√¥ng th·ªÉ ki·ªÉm tra admin: Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p")
      setIsAdmin(false)
      setAdminLoading(false)
      setAdminCheckCompleted(true)
      setAdminDebugInfo({ error: "Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p" })
      return false
    }

    try {
      setAdminLoading(true)
      console.log("üîç ƒêang ki·ªÉm tra quy·ªÅn admin cho user:", user.uid, user.email)

      // L·∫•y vai tr√≤ ng∆∞·ªùi d√πng t·ª´ Firestore
      const userRole = await getUserRole(user.uid)
      console.log("üìã Vai tr√≤ t·ª´ Firestore:", userRole)

      // Ki·ªÉm tra quy·ªÅn admin
      const isUserAdminResult = await isUserAdmin(user.uid)
      console.log("‚úÖ K·∫øt qu·∫£ ki·ªÉm tra admin:", isUserAdminResult)

      // L∆∞u th√¥ng tin debug
      const debugInfo = {
        uid: user.uid,
        email: user.email,
        userRole,
        isUserAdminResult,
        timestamp: new Date().toISOString(),
      }
      console.log("üìä Th√¥ng tin debug admin:", debugInfo)
      setAdminDebugInfo(debugInfo)

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i
      setIsAdmin(isUserAdminResult)
      setAdminCheckCompleted(true)

      // L∆∞u tr·∫°ng th√°i admin v√†o localStorage ƒë·ªÉ debug
      if (isBrowser) {
        localStorage.setItem(
          "gymtracker_admin_status",
          JSON.stringify({
            isAdmin: isUserAdminResult,
            timestamp: new Date().toISOString(),
            email: user.email,
          }),
        )
      }

      return isUserAdminResult
    } catch (error) {
      console.error("‚ùå L·ªói khi ki·ªÉm tra quy·ªÅn admin:", error)
      setIsAdmin(false)
      setAdminCheckCompleted(true)
      setAdminDebugInfo({ error: String(error) })
      return false
    } finally {
      setAdminLoading(false)
    }
  }

  // ƒê·∫£m b·∫£o ng∆∞·ªùi d√πng c√≥ b·∫£n ghi vai tr√≤
  const ensureUserRole = async (user: User) => {
    try {
      console.log("üë§ ƒêang ki·ªÉm tra vai tr√≤ cho user:", user.uid, user.email)

      // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† admin ƒë·∫ßu ti√™n kh√¥ng
      const isFirstAdmin = await checkAndSetupFirstAdmin({
        uid: user.uid,
        email: user.email || "",
        displayName: user.displayName || undefined,
      }).catch((err) => {
        console.error("L·ªói khi ki·ªÉm tra admin ƒë·∫ßu ti√™n:", err)
        return false
      })

      console.log("üîë K·∫øt qu·∫£ ki·ªÉm tra admin ƒë·∫ßu ti√™n:", isFirstAdmin)

      // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ c√≥ vai tr√≤ ch∆∞a
      const userRole = await getUserRole(user.uid).catch((err) => {
        console.error("L·ªói khi l·∫•y vai tr√≤ ng∆∞·ªùi d√πng:", err)
        return null
      })

      console.log("üìã Vai tr√≤ hi·ªán t·∫°i c·ªßa user:", userRole)

      // N·∫øu ch∆∞a c√≥ vai tr√≤, t·∫°o vai tr√≤ m·∫∑c ƒë·ªãnh l√† user
      if (!userRole) {
        console.log("‚ûï T·∫°o vai tr√≤ m·∫∑c ƒë·ªãnh 'user' cho:", user.email)
        await setUserRole({
          uid: user.uid,
          email: user.email || "",
          displayName: user.displayName || undefined,
          role: "user",
        }).catch((err) => {
          console.error("L·ªói khi thi·∫øt l·∫≠p vai tr√≤ ng∆∞·ªùi d√πng:", err)
        })
      }

      // Lu√¥n ki·ªÉm tra quy·ªÅn admin sau khi x·ª≠ l√Ω vai tr√≤
      console.log("üîÑ B·∫Øt ƒë·∫ßu ki·ªÉm tra quy·ªÅn admin...")
      await checkAdminStatus()
    } catch (error) {
      console.error("‚ùå L·ªói khi ƒë·∫£m b·∫£o vai tr√≤ ng∆∞·ªùi d√πng:", error)
      setAdminCheckCompleted(true)
    }
  }

  // Kh√¥i ph·ª•c tr·∫°ng th√°i admin t·ª´ localStorage (ch·ªâ ƒë·ªÉ debug)
  useEffect(() => {
    if (isBrowser && user) {
      try {
        const savedAdminStatus = localStorage.getItem("gymtracker_admin_status")
        if (savedAdminStatus) {
          const parsed = JSON.parse(savedAdminStatus)
          console.log("üîÑ Kh√¥i ph·ª•c tr·∫°ng th√°i admin t·ª´ localStorage:", parsed)

          // Ch·ªâ kh√¥i ph·ª•c n·∫øu email tr√πng kh·ªõp v√† th·ªùi gian kh√¥ng qu√° 1 gi·ªù
          const storedTime = new Date(parsed.timestamp).getTime()
          const currentTime = new Date().getTime()
          const oneHour = 60 * 60 * 1000

          if (parsed.email === user.email && currentTime - storedTime < oneHour) {
            console.log("‚úÖ S·ª≠ d·ª•ng tr·∫°ng th√°i admin ƒë√£ l∆∞u:", parsed.isAdmin)
            setIsAdmin(parsed.isAdmin)
          }
        }
      } catch (error) {
        console.error("L·ªói khi kh√¥i ph·ª•c tr·∫°ng th√°i admin:", error)
      }
    }
  }, [user])

  useEffect(() => {
    // Ch·ªâ ƒëƒÉng k√Ω listener khi ·ªü browser v√† auth ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o
    if (isBrowser && auth) {
      console.log("ƒêƒÉng k√Ω auth state listener")
      const unsubscribe = onAuthStateChanged(auth, async (user) => {
        console.log("Auth state changed:", user?.email)
        setUser(user)

        if (user) {
          // ƒê·∫£m b·∫£o ng∆∞·ªùi d√πng c√≥ b·∫£n ghi vai tr√≤ v√† ki·ªÉm tra quy·ªÅn admin
          try {
            await ensureUserRole(user)
          } catch (error) {
            console.error("L·ªói khi x·ª≠ l√Ω vai tr√≤ ng∆∞·ªùi d√πng:", error)
          }
        } else {
          setIsAdmin(false)
          setAdminLoading(false)
        }

        setLoading(false)
      })

      return () => unsubscribe()
    } else {
      // N·∫øu kh√¥ng ·ªü browser ho·∫∑c auth ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o, ƒë√°nh d·∫•u l√† ƒë√£ t·∫£i xong
      setLoading(false)
      setAdminLoading(false)
    }
  }, [])

  const signUp = async (email: string, password: string, displayName: string) => {
    if (!auth) throw new Error("Auth not initialized")

    try {
      const userCredential = await createUserWithEmailAndPassword(auth, email, password)
      await updateProfile(userCredential.user, { displayName })

      // T·∫°o vai tr√≤ cho ng∆∞·ªùi d√πng m·ªõi
      try {
        await setUserRole({
          uid: userCredential.user.uid,
          email: userCredential.user.email || "",
          displayName: userCredential.user.displayName || undefined,
          role: "user",
        })
      } catch (error) {
        console.error("L·ªói khi t·∫°o vai tr√≤ ng∆∞·ªùi d√πng, nh∆∞ng v·∫´n ti·∫øp t·ª•c:", error)
      }
    } catch (error) {
      console.error("L·ªói khi ƒëƒÉng k√Ω:", error)
      throw error
    }
  }

  const signIn = async (email: string, password: string) => {
    if (!auth) throw new Error("Auth not initialized")

    try {
      await signInWithEmailAndPassword(auth, email, password)
    } catch (error) {
      console.error("L·ªói khi ƒëƒÉng nh·∫≠p:", error)
      throw error
    }
  }

  const signInWithGoogle = async () => {
    if (!auth) throw new Error("Auth not initialized")

    try {
      const provider = new GoogleAuthProvider()

      // Th√™m c√°c scopes n·∫øu c·∫ßn
      provider.addScope("profile")
      provider.addScope("email")

      // ƒê·∫∑t tham s·ªë t√πy ch·ªânh
      provider.setCustomParameters({
        prompt: "select_account",
      })

      console.log("B·∫Øt ƒë·∫ßu ƒëƒÉng nh·∫≠p v·ªõi Google...")
      console.log("Domain hi·ªán t·∫°i:", window.location.hostname)

      const result = await signInWithPopup(auth, provider)
      console.log("ƒêƒÉng nh·∫≠p Google th√†nh c√¥ng:", result.user.email)

      return result.user
    } catch (error: any) {
      console.error("L·ªói chi ti·∫øt khi ƒëƒÉng nh·∫≠p b·∫±ng Google:", error)
      console.error("Error code:", error.code)
      console.error("Error message:", error.message)

      if (error.code === "auth/unauthorized-domain") {
        const currentDomain = window.location.hostname
        console.error(
          `Domain hi·ªán t·∫°i "${currentDomain}" kh√¥ng ƒë∆∞·ª£c ph√©p. Vui l√≤ng th√™m domain n√†y v√†o danh s√°ch Authorized domains trong Firebase Console.`,
        )
        throw new Error(
          `Domain "${currentDomain}" ch∆∞a ƒë∆∞·ª£c th√™m v√†o danh s√°ch domain ƒë∆∞·ª£c ph√©p trong Firebase Console.`,
        )
      }

      // X·ª≠ l√Ω c√°c l·ªói kh√°c...
      if (error.code === "auth/popup-closed-by-user") {
        throw new Error("ƒêƒÉng nh·∫≠p b·ªã h·ªßy. Vui l√≤ng th·ª≠ l·∫°i.")
      }

      // N√©m l·∫°i l·ªói v·ªõi th√¥ng tin chi ti·∫øt h∆°n
      throw {
        code: error.code,
        message: error.message,
        fullError: error,
      }
    }
  }

  const logout = async () => {
    if (!auth) throw new Error("Auth not initialized")

    try {
      await signOut(auth)
      setIsAdmin(false)

      // X√≥a tr·∫°ng th√°i admin kh·ªèi localStorage khi ƒëƒÉng xu·∫•t
      if (isBrowser) {
        localStorage.removeItem("gymtracker_admin_status")
      }
    } catch (error) {
      console.error("L·ªói khi ƒëƒÉng xu·∫•t:", error)
      throw error
    }
  }

  const value = {
    user,
    loading,
    isAdmin,
    adminLoading,
    adminCheckCompleted,
    adminDebugInfo,
    signUp,
    signIn,
    signInWithGoogle,
    logout,
    checkAdminStatus,
  }

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>
}
